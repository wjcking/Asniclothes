#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <stdio.h>
#include <ICRSINT.H>
#include <string>

#include <iostream>
#include <fstream>
#include <cassert>
#include <string>
#include "StringBuilder.h"
#include <numeric> // for std::accumulate
using namespace std;

#include "CJsonObject.hpp"
vector<string> readTxt(string file)
{
	ifstream infile;
	infile.open(file.data());   //将文件流对象与文件连接起来 
	assert(infile.is_open());   //若失败,则输出错误消息,并终止程序运行 
	//StringBuilder<char*> eachLine;
	 
	string line;
	vector<string> vec;
	//string s = std::accumulate(vec.begin(), vec.end(), s);
//	cout << s << endl; // prints 'hello world' to standard output. 

	while (getline(infile, line))
	{
		//lines.push_back(line);
		//cout << line << endl;
	 vec.push_back(line);
	}
	infile.close();             //关闭文件输入流 
	return vec;
	/*string s = std::accumulate(vec.begin(), vec.end(), s);
	return s;*/
}
//string readTxt(string file)
//{
//	ifstream infile;
//	infile.open(file.data());   //将文件流对象与文件连接起来 
//	assert(infile.is_open());   //若失败,则输出错误消息,并终止程序运行 
// 
//	string line;
//	char c;
//	infile >> noskipws;
//	StringBuilder<char> eachLine;
//	while (!infile.eof())
//	{
//		infile >> c;
//		eachLine.Append(c)
//
//	}
//	infile.close();        
//	return eachLine.getString();
//}
 void init()
 {
	 auto ivec =   readTxt("E:\\VSProjects\\AngelWolf\\Debug\\interweaved.json");
	 neb::CJsonObject oJson;
	 
	 for (auto iter = ivec.begin(); iter != ivec.end(); ++iter)
	 {
		// 
		 auto s = *iter;
		 oJson.Add(s);
		 //cout << s << endl;

		
	 }
	 auto t=oJson.ToFormattedString();

	 //auto json = readTxt("E:\\VSProjects\\AngelWolf\\Debug\\interweaved.json");
	 //neb::CJsonObject oJson(json);
	 // 
	 cout << oJson.ToString()<< endl;
 
 }
int main()
{
	init();
	//system("pause");
	return 0;
}