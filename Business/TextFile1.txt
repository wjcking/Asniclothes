 using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CansaiUtils;
namespace Beautiful
{
    public class Json
    {
        public const string Nodes = "Nodes";
        public const string Edges = "Edges";
        public const string Trees = "Trees";
        private const string Token_Array = "{0} = [\r\n{1}\r\n] \r\n";
        public string Name;
        public string Content { get; set; } = string.Empty;

        private static int number = 1;
        private static IDictionary<string, List<Json>> tokenDictionary = new Dictionary<string, List<Json>>();


        public static string GetTokens(short)
        {
            var json = new StringBuilder();
            var list = tokenDictionary[name].Where(jt => jt.Name.ToLower() == name.ToLower()).ToList();
            list.ForEach(s => json.AppendLine(s.Content));
            return String.Format(Token_Array, name, json.ToString());

        }
        public static string GetTokens()
        {
            var jsonResult = new StringBuilder();

            foreach (var each in tokenDictionary)
            {
                var jsonValues = new StringBuilder();
                each.Value.ForEach(s => jsonValues.AppendLine(s.Content));

                jsonResult.AppendFormat(Token_Array, each.Key, jsonValues.ToString());
            }

            return jsonResult.ToString();
        }

        public static int Set(Handler handler, ParentInfo p)
        {
            if (!tokenDictionary.ContainsKey(name + Token_Nodes))
                tokenDictionary.Add(name + Token_Nodes, new List<Json>());
            if (!tokenDictionary.ContainsKey(name + Token_Edges))
                tokenDictionary.Add(name + Token_Edges, new List<Json>());
            if (!tokenDictionary.ContainsKey(name + Token_Trees))
                tokenDictionary.Add(name + Token_Trees, new List<Json>());

            //list or  ,group:{Group}
            var token = new Json();
            token.Name = name + Token_Nodes;
            token.Content = "{ " + $"no:{number}, id:{p.ID}, label:\"{p.Name}\",shape:\"{p.Shape}\"" + "},";
            tokenDictionary[token.Name].Add(token);

            token = new Json();
            token.Name = name + Token_Edges;
            token.Content = "{ " + $"no:{number}, from:{p.ParentID}, to:{p.ID},label:\"{p.Name}\",{p.EdgeStyle}" + "},";
            tokenDictionary[token.Name].Add(token);

            token = new Json();
            token.Name = name + Token_Trees;
            RoleInfo role = (RoleInfo)p;
            if (p is RoleInfo)
            {
                var incidentJson = new StringBuilder();
                incidentJson.Append(",category_info: { id: " + role.CategoryInfo.ID + ",  name: \"" + role.CategoryInfo.Name + "\" }");
                incidentJson.Append(",incident_info: { id: 0, desc: \"" + role.IncidentInfo.Desc.Translate() + "\" }");
                incidentJson.Append($",insert_time:\"{role.InsertTime.ToTimeString()}\",update_time:\"{role.UpdateTime.ToTimeString() }\"");

                token.Content = "{ " + $"no:{number}, id:{role.ID}, pId: {role.ParentID}, name:\"{role.Name}\"" + incidentJson.ToString() + $", {role.TreeStyle}" + "},";
            }
            else
                token.Content = "{ " + $"no:{number}, id:{p.ID}, pId: {p.ParentID}, name:\"{p.Name}\", {p.TreeStyle}" + "},";

            tokenDictionary[token.Name].Add(token);

            return number++;

        }

    }
}


       //public static void WriteJson(string serverPath, string fileName = null)
        //{
        //    string GetJsonInfo(string item)
        //    {
        //        var nameInfo = item.Split('_');
        //        var nameString = new StringBuilder();
        //        foreach (var n in nameInfo)
        //            nameString.Append(n.Substring(0, 1).ToUpper() + n.Substring(1));

        //        return nameString.ToString();
        //    }
        //    var fileList = new Dictionary<string, string>();
        //    foreach (var item in handleList)
        //    {
        //        var jsonName = GetJsonInfo(item.Name);
        //        if (item.Type == Handler.Type_Add)
        //            continue;

        //        var jsonInfo = item.Call(item.Name, item.Type);
        //        jsonInfo = jsonName + " = " + jsonInfo;
        //        var jsonFile = serverPath + item.Name + ".js";
        //        jsonFile = jsonFile.ToLower();
        //        if (fileName == null)
        //        {
        //            File.WriteAllText(jsonFile, jsonInfo);
        //        }
        //        else if (fileName == item.Name)
        //        {
        //            File.WriteAllText(jsonFile, jsonInfo);
        //            return;
        //        }
        //    }
        //}
        //public static string Set(string json)
        //{
        //    Handler handler = JsonConvert.DeserializeObject<Handler>(json);
        //    //    JObject parsed = JObject.Parse(json);

        //    foreach (var hand in handleList)
        //    {
        //        if (hand.Name == handler.Name && hand.Type == handler.Type)
        //        {
        //            return hand.Call(json);
        //        }
        //    }
        //    return handler.Result;
        //}

        //public static string Get(string json)
        //{
        //    Handler handler = JsonConvert.DeserializeObject<Handler>(json);

        //    foreach (var hand in handleList)
        //    {
        //        if (hand.Name == handler.Name && hand.Type == handler.Type)
        //        {
        //            return hand.Call(json);
        //        }
        //    }
        //    return handler.Result;
        //}
			/// <summary>
        ///  
        /// </summary>
        /// <param name="info"></param>
        /// <returns> </returns>
        public static string AddRoleInfo(string json)
        {

            Handler handler = JsonConvert.DeserializeObject<Handler>(json);
            JObject parsed = JObject.Parse(json);
          
            var dicInfo = (JObject)parsed[Handler.Type_Info];

            var builder = new StringBuilder();
      
            foreach (JProperty item in dicInfo.Children())
            {
                builder.AppendFormat("[{0}]", item.Value.GetType().Name);
                builder.AppendFormat("[{0}]{1}", item.Name, item.Value + "<br/>");

                if (item.Name == "category_info")
                    foreach (JProperty it in item.Value.Children())
                    {
                        builder.Append(it.GetType().Name);
                        builder.AppendFormat("[{0}]<br/>", item.Value.GetType().Name);
                        builder.AppendFormat("[{0}]{1}<br/>", it.Name, it.Value);
                    }
                if (item.Name == "incident_info")
                    foreach (JProperty it in item.Value.Children())
                    {
                        builder.Append(it.GetType().Name);
                        builder.AppendFormat("[{0}]<br/>", item.Value.GetType().Name);
                        builder.AppendFormat("[{0}]{1}<br/>", it.Name, it.Value);
                    }
                builder.AppendLine();
            }
            builder.AppendLine(handler.Name);
            builder.AppendLine(handler.Type);
            return builder.ToString();
        }
		
--------------------------------		
		
		private static IList<Handler> Cache
        {
            get
            {
        string Cache_Handlers = "Handlers";
                var cache = HttpContext.Current.Cache;
                if (cache.Get(Cache_Handlers) == null)
                    cache.Insert(Cache_Handlers, GetHandlers());

                return (IList<Handler>)HttpContext.Current.Cache[Cache_Handlers];
            }
        }
 foreach (var hand in Cache)
            {
                if (hand.Name == "role_category")
                {//PoweredSource.Category.GetJson(hand.Name);//
                    handler.Result =  hand.Func(hand.Name);
                    return handler.Result;
                }
                else if (hand.Name == handler.Name && hand.Type == Handlers.Type_List)
                {
                    // PoweredSource.Role.GetRoleJson();//
                    handler.Result = hand.FuncInfo();
                    return handler.Result;
                }
                else if (hand.Name == handler.Name && hand.Type == Handlers.Type_Add)
                {
                    // Func<string> funcInfo =  = PoweredSource.Role.GetRoleJson;funcInfo() Business.Role.AddRoleInfo(json);// 
                    handler.Result = hand.Func(json);
                    return handler.Result;
                }
            }
  //    {
  //  "priority_id": 0,
  //  "category_info": {
  //    "id": 0,
  //    "name": null
  //  },
  //  "incident_info": {
  //    "prioity_id": 0,
  //    "desc": ""
  //  },
  //  "desc": "",
  //  "insert_time": "\/Date(1589796061911+0800)\/",
  //  "update_time": "\/Date(1589796061911+0800)\/",
  //  "parent_id": 1,
  //  "parent_name": "",
  //  "id": 1,
  //  "name": "所有Except?."
                        //}, /// <summary>
        /// 从库中中写入json
        /// </summary>
        public static void GenerateJson()
        {
            StringBuilder json = new StringBuilder();
            Newtonsoft.Json.Formatting jsonFormatting = Newtonsoft.Json.Formatting.None;

            List<ExamInfo> examInfoListWithoutCategory = GetExamInfoListByRegister();
            List<ExamResultInfo> examResultList = new DataUtility.ExamResult().GetListArray("100 = 100 ORDER BY [Pubdate] DESC");
            List<OutlineInfo> outlineList = OutlineUtil.GetListArray(string.Empty);
            //库中数据
            json.Append("var jsonExamInfoListWithoutCategory = " + JsonConvert.SerializeObject(examInfoListWithoutCategory, jsonFormatting) + ";");
          //禁用右键菜单
            if (SysConfig.DEBUGE_CODE != SysConfig.DebugHtmlCode)
                json.Append(SysConfig.JS_ForbiddenSelectStart + SysConfig.JS_ForbiddenContextMenu);

            json.Append("\r\n");
            json.Append("var jsonExamResultList = " + JsonConvert.SerializeObject(examResultList, jsonFormatting) + ";\r\n");
            //以下还是内存中的内容
            json.Append("var jsonExamInfoCategoryList = " + JsonConvert.SerializeObject(ExamInfoCategoryList, jsonFormatting) + ";\r\n");
            json.Append("var jsonMainSubjectList = " + JsonConvert.SerializeObject(MainSubjectList, jsonFormatting) + ";\r\n");
            json.Append("var jsonOutlineList = " + JsonConvert.SerializeObject(outlineList, jsonFormatting) + ";\r\n");
            
            System.IO.File.WriteAllText(Environment.CurrentDirectory + @"\template\js\cache.js", json.ToString(), Encoding.Default);
        }

        /// <summary>
        /// 如果是第一次运行了
        /// </summary>
        public static void InitializeJson()
        {
            //if (SysConfig.IsInitialized)
            //    return;

            List<StatisticInfo> statisticList = StatisticUtil.GetTotalCountList();
            StringBuilder json = new StringBuilder();

            json.AppendFormat("var efdCategoryID = \"{0}\";  \r\n " , Valid.AccessRegisterInfo.CategoryID );
            json.Append("var jsonStatisticList = " + JsonConvert.SerializeObject(statisticList, Newtonsoft.Json.Formatting.None) + ";\r\n");

            System.IO.File.WriteAllText(Environment.CurrentDirectory + @"\template\js\Init.js", json.ToString(), Encoding.Default);

            SysConfig.SettingsHelper.SetValue("IsInitialized", "true");
        }